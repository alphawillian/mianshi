代码规范
1：构造函数首字母大写

原型规则和示例
1：所有的引用类型（数组、对象、函数）除了"null"以外），都具有对象特性，即可自由扩展属性

2：所有的引用类型（数组、对象、函数）（null除外），都有一个__proto__属性（隐式原型），属性值是一个普通的对象。

3：所有的函数，都有一个prototype属性（显式原型），属性值也是一个普通对象。

4：所有的引用类型（数组、对象、函数）__proto__属性值指向它的构造函数的"prototype"属性值

5:当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么回去它的__proto__(即它的构造函数的prototype)中去寻找 。



作用域和闭包-执行上下文

fn();//不会报错
function fn (){
	//函数声明
}
fn1();//不报错 undefined
var fn1 = function(){
	//函数表达式
}

闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！


ajax readyState状态码含义
0	(未初始化)还没有调用send()方法
1	(载入)已调用send()方法，正在发送请求
2	(载入完成)send()方法执行完成，已经接受到全部响应内容
3	(交互)正在解析响应内容
4	(完成)响应内容解析完成，可以在客户端调用了
	
	status
2xx 成功处理请求。如 200
3xx 需要重定向，浏览器直接跳转
4xx 客户端请求错误，如404
5xx 服务器端的错误

cookie
1:本身用户客户端和服务器端的通信
2：但是它有本地存储的功能，于是就被"借用";
3:使用 document.cookie = ... 获取和修改即可

cookie 用于存储的缺点
1：存储量太小，只有4kb
2：所有的http请求都带着，会影响获取资源的效率
3：API简单，需要封装才能使用 documentcookie = ...(是一个字符串)。

localStorage和sessionStorage
1: HTML5 专门为存储而设计，最大容量为5M
2: API简单易用

localStorage和sessionStorage可能遇到的问题
1：ios safari 隐藏模式下 localStorage.getItem会报错，建议用try-catch 封装一下

不使用模块化
util.js getFormatDate函数
a-util.js aGetFormatDate函数使用了getFormatDate
a.js 使用aGetFormatDate函数
示例如下：
//util.js
function getFormatDate(date, type){
	//type === 1 返回2017-08-24
	//type === 2 返回2017年6月15日
	//...
}

// a-util.js
function aGetFormatDate(date){
	//要求返回 2017年6月15日 格式
	return getFormatDate(date,2);
}

// a.js
var dt = new Date();
console.log(aGetFormatDate(dt));

<script src="util.js"></script>
<script src="a-util.js"></script>
<script src="a.js"></script>
缺点：
1:这三个<script>标签顺序不能乱了
2：这些代码中的函数必须是全局变量，才能暴露给使用方。全局变量污染
3：a.js 知道要引用a-util.js,但是他不知道a-util.js需要依赖什么。

使用模块化
//util.js
export{
	getFormatDate: function(date, type){
		//type === 1 返回2017-08-24
		//type === 2 返回2017年6月15日
		//...
	}
}

// a-util.js
var getFormatDate = require('util.js');
exprot{
	aGetFormatDate:function(date){
		//要求返回 2017年6月15日 格式
		return getFormatDate(date,2);
	}
	
}

//a.js
var aGetFormatDate = require('a-util.js');
varr dt = new Date();
console.log(aGetFormatDate(dt));

AMD
1:require.js  requirejs.org
2:全局 define函数
3：全局require函数
4：依赖js会自动、异步加载

使用requirejs的好处
1：实现js文件的异步加载，避免网页失去响应；
2：管理模块之间的依赖性，便于代码的编写和维护。

CommonJs

CommonJs 不会异步加载JS，而是同步一次性加载出来

AMD和CommonJS的使用场景
1：需要异步加载JS，使用AMD
2：使用了npm之后建议使用CommonJS

从输入url到得到 html的详细过程

加载资源的形式
1：输入url(或跳转页面) 加载html
2：加载html的静态资源如：<script></script>

加载一个资源的过程
1：浏览器根据DNS服务器得到域名的IP地址
2：向这个IP的机器发送http请求
3：服务器收到、处理并返回http请求
4：浏览器得到返回内容

浏览器渲染页面的过程
1：根据HTML结构生成DOM Tree
2：根据csss生产CSSOM
3: 将DOM和CSSOM整合成RenderTree
4: 根据RenderTree开始渲染和展示
5：遇到<script>时，会执行并阻塞渲染

window.onload 和 DOMContentLoaded的区别

window.addEventListener('load',function(){
	//页面全部资源加载完后才能执行，包括图片、视频等
})
document.addEventListener('DOMContentLoaded',function(){
	//DOM 渲染完后即可执行，此时图片、视频可能还加载完。
})

性能优化
1：多使用内存，缓存
2：减少cpu和网络使用

加载资源优化
1：静态资源的压缩合并 例如通过webpack对js,css合并压缩
2：静态资源缓存。
3：使用CDN让资源记载能快
4：使SSR后端渲染，数据直接输出到HTML中

渲染优化
1：css放前面，js放后面
2：懒加载(图片懒加载，下拉加载更多)
3：减少DOM查询，对DOM查询做缓存；
4：减少DOM操作，多个操作尽量合并一起执行
5：事件节流
6：尽早执行操作(如DOMContentLoaded)


时间节流代码演示

var textarea = document.getElementById('text');
var timeoutId;
textarea.addEventListener('keyup', function () {
	if(timeoutId){
		clearTimeout(timeoutId);
	}
	timeoutId = setTimeout(function () {
		//触发 change 事件
	},100)
})


XSS跨站请求攻击













